//Palindrome
let str="malayala"
let ct=0,j=str.length-1
for(let i=0;i<str.length;i++){
    if(i>j){break;}
    if(str[i]!=str[j]){ct++;break}
    j--;
}
if(ct==0){console.log("palindrome")}
else{console.log("not a palindrome")}

let obj=[
    1,2,3,4
]
//forEach
obj.forEach((i)=>{console.log(i)})
obj.forEach(i=>{console.log(i)})
//Map
obj.map((ele)=>{console.log(ele)})
arr=obj.map((i)=>{return i%2})
console.log(arr)
arr=obj.map(i=>{return i%2})
console.log(arr)
//Repeat function
let a="a"
console.log(a.repeat(3))
//Filter
obj.filter((ele)=>{console.log(ele%2)})
arr=obj.filter((i)=>{return i%2})
console.log(arr)
arr=obj.filter(i=>{return i%2})
console.log(arr)
//Map and Filter mostly come together
let arr=[
    {
        name:"elaks",dob:2003
    },
    {
        name:"dhaboo",dob:2004
    },
    {
        name:"harini",dob:2002
    },
    {
        name:"abi",dob:2004
    },
    {
        name:"shawn",dob:2001
    },
]
arr.filter((i)=>{console.log(i.name)})
let arr1=arr.filter((i)=>i.dob>=2003).map((i)=>i.name)
console.log(arr1)
let arr2=arr.filter(i=>i.dob>=2003).map(i=>i.name)
console.log(arr2)

//Shallow copy
const a1=[1,2,3,4,5]
const a2=a1
a2[2]=200
console.log(a1,a2)

//Deep copy
const a3=[1,2,3,4,5]
const a4=[...a3]
a4[2]=200
console.log(a3,a4)

//Duplicate values in object
let obj={
    name:"elaks",
    dob:2003,
    name:"dhat"
}
console.log(obj)

let a=[
    {
        name:"elaks",age:23,salary:27000,phoneno:1234567890
    },
    {
        name:"dhaboo",age:24,salary:27000,phoneno:1234567895
    },
    {
        name:"harini",age:25,salary:24000,phoneno:1234567894
    },
    {
        name:"devi",age:26,salary:25000,phoneno:1234567891
    },
]
let arr=a.filter(i=>i.salary>=25000).map(i=> {return {name:i.name,age:i.age}})
console.log(arr)

//Destructuring-->Unpacking elements
let arr=[1,2,3,4,5,6,7]
let [a,b,c,d,...e]=arr;
console.log(a,b,c,d,e)

//REST 
let a=[10,20,30,40,50,60,70,80,90,100]
let [a1,a2,a3,a4,...a5]=a.filter(i=>{if(i!=30){return i}})
console.log(a1,a2,a3,a4,a5)
//RENAME
let obj={name:"abi",dob:2004};
obj.names=obj.name;
delete obj.name;
console.log(obj.names);

setTimeout(()=>console.log("hi"),3000)
setInterval(()=>console.log("hi"),3000)

//API fetching by PROMISE
fetch("https://jsonplaceholder.typicode.com/todos/")
.then(i=>i.json()).then(i=>console.log(i))

const px=new Promise((resolve,rject)=>{
    setTimeout(()=>{
        resolve("resolved")
    },3000)
})
px.then(i=>console(value)).catch(()=>console.log("error"))

const px=new Promise((resolve,rject)=>{
        resolve("resolved")
})
px.then(i=>console.log(i)).catch(()=>console.log("error"))

//API fetching using ASYNC and AWAIT
let api=async()=>{
    let pro=await fetch("https://jsonplaceholder.typicode.com/todos/")
    let data=await pro.json();
    console.log(data)
}
api()
